#!/usr/bin/lua

-- Get and copy a clean environment.
require "bit";
local pristine={};
for k,v in pairs(_G) do
    pristine[k]=v;
end;

require "lfs"
require "currying";
require "AllTests";

local function Require(env, file)
    if env.__included[file] then
        return;
    end;
    env.__included[file]=true;
    file=file..".lua";
    local runner, err=loadfile(file);
    if not runner then
        error(file..": "..err);
    end;
    setfenv(runner, env);
    runner();
end;

if arg then
    for i=1,#arg do
        local f=arg[i];
        local env=setmetatable({}, {__index=pristine});
        env.__included={
            bit=true
        };
        env._G=env;
        env.require=Curry(Require, env);
        env.AllTests=AllTests;
        env.require("global");

        local runner,err=loadfile(f);
        if not runner then
            error(err);
        end;
        setfenv(runner, env);
        runner();
    end;
end;

if #arg > 0 and AllTests:GetCount() > 0 then
    local tests, numRan, numSuccessful, numCrashed, numFailed;

    AllTests:AddListener(Metatables.Noop({
        StartAllTests = function(self, suite, name, runner, reason)
            tests = {};
            numRan = 0;
            numSuccessful = 0;
            numFailed = 0;
            numCrashed = 0;
        end,
                    
        FinishAllTests = function(self, suite, successful, report)
            if successful then
                print(("Cumulative: All %d tests ran successfully."):format(numRan));
            else
                print(("Cumulative: %d of %d tests ran successfuly. %d failed, %d crashed"):format(
                    numSuccessful,
                    numRan,
                    numFailed,
                    numCrashed));
            end;
        end
    }));

    AllTests:AddRecursiveListener(Metatables.Noop({
        TestStarted = function()
            numRan = numRan + 1;
        end,

        TestSuccessful = function(self, suite, name, runner, reason)
            numSuccessful = numSuccessful + 1;
        end,

        TestFailed = function(self, suite, name, runner, reason)
            numFailed = numFailed + 1;
            local testIndex = #tests + 1;
            print(("[FAIL] %d. %s\n  %s"):format(testIndex, name, reason:gsub("\n", "\n    ")));
            Lists.Insert(tests, runner);
        end,

        TestCrashed = function(self, suite, name, runner, errorMessage)
            numCrashed = numCrashed + 1;
            local testIndex = #tests + 1;
            print(("[CRASH] %d. %s\n%s"):format(testIndex, name, errorMessage));
            Lists.Insert(tests, runner);
        end,

    }));
    AllTests:Run();
end;
