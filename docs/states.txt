The state framework is designed to be easy to use, but there's a few terms used a lot that you should understand
before delving into it. Feel free to use this as a reference as you work with it and through the documentation.

State - either a logical state, or an object that defines the actions for one. For our purposes, a state has
three responsibilities:
 * Assert whether it is applicable for the specified values
 * Perform some work on a context object, if necessary
 * Change the active states on the state context object, if necessary

State Function - A function that defines a state, as described above. It is of the form:

state(stateContext, context, ...)
A function that represents a state. It should check if it is applicable for the specified values. If so, 
it should optionally perform work or change the active states, or both. If it was applicable, it should
return true, otherwise false.
stateContext
    the state context object
context
    the context object
...
    the values
returns
    true if it was applicable for the specified values, otherwise returns false

State Object - A table that defines a state, as described above. It must have three methods:

State:Check(context, ...)
Returns whether the specified values are applicable to this state using the specified context.
    context
        the context object
    ...
        the values
    returns
        true, if this state is applicable for the specified values, otherwise value

State:Act(context, ...)
Performs work using the specified values on the specified context object.
    context
        the context object
    ...
        the values

State:Transition(stateContext, context)
Activates or deactivates states on the the state context object. A state should be activated if, and only if,
it could be applicable following this state.
    stateContext
        the state context object, as created by States.StateContext
    context
        the context object

State Group - a list of state names. State groups may be activated and deactivated on their own, and will cause
their child states to be activated or deactivated, respectively, as a result.

State Alias - a string that that references another state. This alias will be followed until a concrete state
is found. This is useful when writing extensible state schemas.

State Machine - an object that oversees state transitions. For this framework, the state machine is, ironically,
stateless. It operates on a state context object and a context object. It is provided values (the form of which is
not strictly defined), and passes those values to each active state. The states check whether the specified values
are applicable to that state, and, if so, operate on them accordingly. Only one state may successfully operate
on the specified values.

State Schema - a table that contains all the states for a state machine. It can be verified using 
States.AssertStateSchema. It should contain mappings of state names to either: state objects or functions, state 
groups, or state aliases.

State Context Object - a table that contains methods to query and modify active states. States.StateContext is used
to create such an object.

Context Object - a object that represents the persistent context. States perform work on the context object. The
actual form of this object is completely defined by the user of the framework.

Values - values that represent some data or impetus for state change. States analyze these values and, if the
state is applicable for these specified values, performs work based on them to the context object. The actual form
of these values is completely defined by the user of the framework.
