#!/usr/bin/lua

-- get-requires returns the dependencies of a given lua file. If multiple files are
-- provided, then each of those file's dependencies will be listed.

-- Get and copy a clean environment.
require "bit";
local pristine={};
for k,v in pairs(_G) do
    pristine[k]=v;
end;

require "currying";
require "LuaEnvironment";

local dependencies={};
local dependencyStack={};

for i=1,#arg do
    local file=arg[i]:gsub("^\./", "");
    local env=LuaEnvironment:New(pristine);
    env:AddLoader(LuaEnvironment.Loaders.Ignore("bit", "lfs"));
    env:AddLoader(LuaEnvironment.Loaders.Filesystem(loadfile));
    env:Require("global");

    -- Register our listeners to construct our dependency tree.
    function env:OnRequireStart(package)
        if #dependencyStack > 0 then
            local parent=dependencyStack[#dependencyStack]
            dependencies[parent][package]=true;
        end;
        dependencies[package]=dependencies[package] or {};
        table.insert(dependencyStack, package);
    end;
    function env:OnRequireFinish(package)
        local expected=table.remove(dependencyStack);
        assert(package==expected, "Unexpected dependency. Expected: "..expected.." Received: "..package);
    end;

    env:Require(file);
end;

local processed={};
function Insert(file)
	if processed[file] then
		return
	end;
	processed[file]=true;
    table.sort(dependencies[file]);
    for i=1, #dependencies[file] do
        local parent=dependencies[file][i];
        Insert(parent);
    end
    table.insert(processed, file);
end;

local files={};
for file,_ in pairs(dependencies) do
    table.insert(files, file);
end;
table.sort(files);

local maxLength=0;
for i=1, #files do
    maxLength=math.max(maxLength, #files[i]);
    Insert(files[i]);
end;

for i=1, #processed do
    local file=processed[i];
    local deps=dependencies[file];
    local paddedLine=file..(" "):rep(maxLength-#file);
    if #deps > 0 then
        for i=1,#deps do
            if i > 1 then
                print("# \" \""..(" "):rep(maxLength-3).." > "..deps[i]);
            else
                print("# "..paddedLine.." > "..deps[i]);
            end;
        end;
    else
        print("# "..paddedLine.." .");
    end;
end;
for i=1, #processed do
    if arg[processed[i]] then
        print(processed[i]);
    else
        print("! "..processed[i]);
    end;
end;
