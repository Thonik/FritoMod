#!/usr/bin/lua

require "currying";

local env;
local dependencies={};
local dependencyStack={};

local libs={
	bit=true,
	lfs=true
};

local global=loadfile("global.lua") or Noop;
global();

ORIG_REQUIRE=require;
local function Require(env, file)
    if libs[file] then
        return ORIG_REQUIRE(file);
    end;
    file=file..".lua";
    if env.__included[file] then
        return;
    end;
    env.__included[file]=true;
    table.insert(dependencyStack[#dependencyStack], file);
    local runner, err=loadfile(file);
    if not runner then
        error(env.__included[1]..":"..err);
    end;
    setfenv(runner, env);
    if dependencies[file] then
        runner();
    else
        dependencies[file]={};
        table.insert(dependencyStack, dependencies[file]);
        runner();
        table.remove(dependencyStack);
    end;
end;

local function RunFile(file)
    dependencies[file]={};
    table.insert(dependencyStack, dependencies[file]);
    local env=setmetatable({}, {__index=_G});
    env.__included={file};
    env.require=setfenv(Curry(Require, env), env);
    local runner=assert(loadfile(file));
    setfenv(runner, env);
    runner();
    table.remove(dependencyStack);
end;

for i=1, #arg do
    arg[i]=arg[i]:gsub("^\./", "");
	RunFile(arg[i]);
    arg[arg[i]]=true;
end;

local processed={};
function Insert(file)
	if processed[file] then
		return
	end;
	processed[file]=true;
    table.sort(dependencies[file]);
    for i=1, #dependencies[file] do
        local parent=dependencies[file][i];
        Insert(parent);
    end
    table.insert(processed, file);
end;

local files={};
for file,_ in pairs(dependencies) do
    table.insert(files, file);
end;
table.sort(files);

local maxLength=0;
for i=1, #files do
    maxLength=math.max(maxLength, #files[i]);
    Insert(files[i]);
end;

for i=1, #processed do
    local file=processed[i];
    local deps=dependencies[file];
    local paddedLine=file..(" "):rep(maxLength-#file);
    if #deps > 0 then
        for i=1,#deps do
            if i > 1 then
                print("# \" \""..(" "):rep(maxLength-3).." > "..deps[i]);
            else
                print("# "..paddedLine.." > "..deps[i]);
            end;
        end;
    else
        print("# "..paddedLine.." .");
    end;
end;
for i=1, #processed do
    if arg[processed[i]] then
        print(processed[i]);
    else
        print("! "..processed[i]);
    end;
end;

