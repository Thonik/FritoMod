#!/usr/bin/lua

-- get-requires returns the dependencies of a given lua file. If multiple files are
-- provided, then each of those file's dependencies will be listed.

-- Get and copy a clean environment.
require "bit";
require "lfs";
local pristine={};
for k,v in pairs(_G) do
	pristine[k]=v;
end;

require "fritomod/currying";
require "fritomod/LuaEnvironment";
require "fritomod/Strings";
require "fritomod/Tables";
require "fritomod/Lists";
require "fritomod/Serializers-Source";
require "fritomod/LuaDependencyGraph";
require "fritomod/LuaDependencyList";

local ALL=false;
local MODE="text";
local VERBOSE=false;

function UnixClean(str)
	str = str:gsub("\\", "/");
	return str;
end;

function WindowsClean(str)
	str = str:gsub("/", "\\");
	return str;
end;

local CLEAN = UnixClean;

local files={};
local function AddFile(file)
	if lfs.attributes(file, "mode") == "file" and file:find("\.lua$") then
		file = tostring(file):gsub("^\./", "");
		table.insert(files, file);
	end;
end;

local function PlainTextWriter()
	local processor = LuaDependencyList:New();
	function processor:DoOutput(out, files)
		Lists.Each(files, function(file)
			out(CLEAN(file));
		end);
	end;
	return processor;
end;

local function MakefileWriter()
	local processor = LuaDependencyGraph:New();
	function processor:DoOutput(out, childrenOf)
		for parent, children in pairs(childrenOf) do
			local childNames = Tables.Keys(children);
			if #childNames > 0 then
				out(("%s: %s"):format(
					parent,
					CLEAN(Strings.Join(" ", childNames))
				));
			end;
		end;
	end;
	return processor;
end;

local function XMLWriter()
	local processor = LuaDependencyList:New();
	function processor:DoOutput(out, files)
		out('<Ui xmlns="http://www.blizzard.com/wow/ui/">');
		for _, file in ipairs(files) do
			file = CLEAN(file);
			out(('    <Script file="%s" />'):format(file));
		end;
		out('</Ui>');
	end;
	return processor;
end;

local function LuaWriter()
	local processor = LuaDependencyGraph:New();
	function processor:DoOutput(out, childrenOf)
		Serializers.WriteSource(self.childrenOf, out);
		out("");
	end;
	return processor;
end;

local processor = PlainTextWriter();

for i=1,#arg do
	local o=arg[i];
	if o=="-M" or o=="--make" then
		processor = MakefileWriter();
	elseif o=="-T" or o=="--text" or o=="--toc" then
		processor = PlainTextWriter();
	elseif o=="-X" or o=="--xml" then
		processor = XMLWriter();
	elseif o=="-L" or o=="--lua" then
		processor = LuaWriter();
	elseif o=="-a" or o=="--all" then
		ALL=true;
	elseif o=="-u" or o=="--unix" then
		CLEAN = UnixClean;
	elseif o=="-w" or o=="--windows" then
		CLEAN = WindowsClean;
	elseif o=="-v" or o=="--verbose" then
		VERBOSE=true;
	elseif lfs.attributes(arg[i], "mode") == "directory" then
		local dir=arg[i];
		for child in lfs.dir(dir) do
			AddFile(dir.."/"..child);
		end;
	else
		AddFile(arg[i]);
	end;
end;

function processor:NewEnvironment()
	return LuaEnvironment:New(pristine);
end;

Lists.Each(files, processor, "Process");

if not ALL then
	processor:Filter(Lists.Contains, files);
end;

processor:Output(print);
