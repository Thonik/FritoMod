#!/usr/bin/lua

-- get-requires returns the dependencies of a given lua file. If multiple files are
-- provided, then each of those file's dependencies will be listed.

-- Get and copy a clean environment.
require "bit";
require "lfs";
local pristine={};
for k,v in pairs(_G) do
    pristine[k]=v;
end;

require "fritomod/currying";
require "fritomod/LuaEnvironment";
require "fritomod/Strings";
require "fritomod/Tables";
require "fritomod/Lists";
require "fritomod/Serializers-Lua";

local dependencies={};
local dependencyStack={};

local ALL=false;
local MODE="text";
local VERBOSE=false;

local files={};

for i=1,#arg do
    local o=arg[i];
    if o=="-M" or o=="--make" then
        -- Makefile-making mode.
        MODE="make";
    elseif o=="-T" or o=="--text" or o=="--toc" then
        MODE="text";
    elseif o=="-X" or o=="--xml" then
        MODE="xml";
    elseif o=="-L" or o=="--lua" then
        MODE="lua";
    elseif o=="-a" or o=="--all" then
        ALL=true;
    elseif o=="-v" or o=="--verbose" then
        VERBOSE=true;
    elseif lfs.attributes(arg[i], "mode") == "directory" then
        local dir=arg[i];
        for child in lfs.dir(dir) do
            local child=dir.."/"..child;
            if lfs.attributes(child, "mode") == "file" and child:find("\.lua$") then
                table.insert(files, child);
            end;
        end;
    elseif lfs.attributes(arg[i], "mode") == "file" and arg[i]:find("\.lua$") then
        table.insert(files, arg[i]);
    end;
end;

table.sort(files);
for i=1,#files do
    files[i]=files[i]:gsub("^\./", "");
    local file=files[i];
    local env=LuaEnvironment:New(pristine);
    env:AddLoader(LuaEnvironment.Loaders.Ignore("bit", "lfs"));
    env:AddLoader(LuaEnvironment.Loaders.Filesystem(loadfile));
    env:Require("bin/global");

    -- Register our listeners to construct our dependency tree.
    function env:OnRequireLoading(package)
        if not package:find("\.lua$") then
            package=package..".lua";
        end;
        if #dependencyStack > 0 then
            local parent=dependencyStack[#dependencyStack]
            dependencies[parent][package]=true;
        end;
        dependencies[package]=dependencies[package] or {};
        table.insert(dependencyStack, package);
    end;
    function env:OnRequireFinish(package)
        if not package:find("\.lua$") then
            package=package..".lua";
        end;
        local expected=table.remove(dependencyStack);
        assert(package==expected, "Unexpected dependency. Expected: "..expected.." Received: "..package);
    end;

    env:Require(file);
end;

if not ALL then
    dependencies=Tables.FilterKeys(dependencies, Lists.Contains, files);
end;

local modes={};
function modes.make()
    for file, deps in pairs(dependencies) do
        local dependencyNames=Tables.Keys(deps);
        if #dependencyNames > 0 then
            print(file..": "..Strings.Join(" ", Tables.Keys(deps)));
        end;
    end;
end;

function modes.text()
    local orderedDependencies={};
    function Insert(file)
        if orderedDependencies[file] then
            return;
        end;
        orderedDependencies[file]=true;
        if dependencies[file] then
            local deps=Tables.Keys(dependencies[file]);
            table.sort(deps);
            Tables.Each(deps, Insert);
            table.insert(orderedDependencies, file);
        end;
    end;

    local maxLength=0;
    for i=1, #files do
        maxLength=math.max(maxLength, #files[i]);
        Insert(files[i]);
    end;

    Lists.Each(
        Lists.Map(orderedDependencies, "gsub", "/", "\\"),
        print);
end;

function modes.lua()
    Serializers.WriteLua(dependencies, io.stdout, "write");
    print("");
end;

modes[MODE]();
